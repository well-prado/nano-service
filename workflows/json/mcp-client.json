{
  "name": "MCP Client",
  "description": "ChatGPT-like UI for interacting with MCP servers",
  "version": "1.0.0",
  "trigger": {
    "http": {
      "method": "GET",
      "path": "/",
      "accept": "text/html"
    }
  },
  "steps": [
    {
      "name": "render-client-ui",
      "node": "workflow-ui",
      "type": "module"
    }
  ],
  "nodes": {
    "render-client-ui": {
      "inputs": {
        "title": "MCP Client - ChatGPT-like Interface",
        "content": "<div class=\"chat-container\">\n  <div class=\"chat-header\">\n    <h2>MCP Client</h2>\n    <p>Test your MCP server tools with this ChatGPT-like interface</p>\n  </div>\n  \n  <div class=\"server-info\">\n    <h3>Server Configuration</h3>\n    <div class=\"form-group\">\n      <label for=\"server-endpoint\">MCP Server Endpoint:</label>\n      <input type=\"text\" id=\"server-endpoint\" value=\"/simple-mcp\" placeholder=\"/your-mcp-server-endpoint\">\n    </div>\n    <button id=\"connect-btn\">Connect to Server</button>\n    <div id=\"tools-list\" class=\"hidden\">\n      <h4>Available Tools:</h4>\n      <ul id=\"tools-display\"></ul>\n    </div>\n  </div>\n  \n  <div id=\"chat-messages\"></div>\n  \n  <div class=\"chat-input\">\n    <textarea id=\"user-input\" placeholder=\"Ask me anything...\"></textarea>\n    <button id=\"send-btn\">Send</button>\n  </div>\n</div>\n\n<style>\n  .chat-container {\n    max-width: 800px;\n    margin: 0 auto;\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  }\n  \n  .chat-header {\n    background: linear-gradient(135deg, #4b6cb7, #182848);\n    color: white;\n    padding: 20px;\n    border-radius: 10px 10px 0 0;\n    margin-bottom: 20px;\n  }\n  \n  .chat-header h2 {\n    margin: 0;\n  }\n  \n  .chat-header p {\n    margin: 5px 0 0;\n    opacity: 0.8;\n  }\n  \n  .server-info {\n    background: #f5f5f5;\n    border: 1px solid #ddd;\n    border-radius: 8px;\n    padding: 15px;\n    margin-bottom: 20px;\n  }\n  \n  .form-group {\n    margin-bottom: 15px;\n  }\n  \n  label {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: 500;\n  }\n  \n  input[type=\"text\"] {\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n  }\n  \n  button {\n    background: #0066cc;\n    color: white;\n    border: none;\n    padding: 8px 15px;\n    border-radius: 4px;\n    cursor: pointer;\n    font-weight: 500;\n  }\n  \n  button:hover {\n    background: #0052a3;\n  }\n  \n  .hidden {\n    display: none;\n  }\n  \n  #chat-messages {\n    height: 400px;\n    border: 1px solid #ddd;\n    border-radius: 8px;\n    padding: 15px;\n    overflow-y: auto;\n    margin-bottom: 15px;\n    background: white;\n  }\n  \n  .chat-input {\n    display: flex;\n    gap: 10px;\n  }\n  \n  textarea {\n    flex-grow: 1;\n    border: 1px solid #ddd;\n    border-radius: 8px;\n    padding: 10px;\n    min-height: 80px;\n    resize: vertical;\n    font-family: inherit;\n  }\n  \n  .user-message {\n    background: #e6f2ff;\n    border-radius: 8px;\n    padding: 10px 15px;\n    margin-bottom: 10px;\n    margin-left: 20px;\n    position: relative;\n  }\n  \n  .user-message::before {\n    content: \"ðŸ‘¤\";\n    position: absolute;\n    left: -25px;\n    top: 10px;\n  }\n  \n  .assistant-message {\n    background: #f0f0f0;\n    border-radius: 8px;\n    padding: 10px 15px;\n    margin-bottom: 10px;\n    margin-left: 20px;\n    position: relative;\n  }\n  \n  .assistant-message::before {\n    content: \"ðŸ¤–\";\n    position: absolute;\n    left: -25px;\n    top: 10px;\n  }\n  \n  .tool-call {\n    background: #f0e6ff;\n    border-radius: 8px;\n    padding: 10px 15px;\n    margin-bottom: 10px;\n    border-left: 3px solid #6c2dc7;\n  }\n  \n  .tool-result {\n    background: #e6fff0;\n    border-radius: 8px;\n    padding: 10px 15px;\n    margin-bottom: 10px;\n    border-left: 3px solid #2dc76c;\n  }\n  \n  pre {\n    background: #f7f7f7;\n    padding: 10px;\n    border-radius: 4px;\n    overflow-x: auto;\n    font-size: 0.9em;\n  }\n  \n  code {\n    font-family: 'Courier New', Courier, monospace;\n  }\n</style>\n\n<script>\n  // DOM Elements\n  const serverEndpointInput = document.getElementById('server-endpoint');\n  const connectBtn = document.getElementById('connect-btn');\n  const toolsList = document.getElementById('tools-list');\n  const toolsDisplay = document.getElementById('tools-display');\n  const chatMessages = document.getElementById('chat-messages');\n  const userInput = document.getElementById('user-input');\n  const sendBtn = document.getElementById('send-btn');\n  \n  // Store available tools and conversation history\n  let availableTools = [];\n  let conversation = [];\n  \n  // Connect to the MCP server and fetch available tools\n  connectBtn.addEventListener('click', async () => {\n    const endpoint = serverEndpointInput.value.trim();\n    if (!endpoint) {\n      alert('Please enter a valid server endpoint');\n      return;\n    }\n    \n    try {\n      chatMessages.innerHTML = '<div class=\"assistant-message\">Connecting to server...</div>';\n      \n      // Fetch info from the server\n      const response = await fetch(endpoint);\n      const serverInfo = await response.json();\n      \n      // Fetch available tools if the server has tools\n      if (serverInfo.tools_count > 0) {\n        const toolsResponse = await fetch(`${endpoint}/tools`);\n        const toolsData = await toolsResponse.json();\n        \n        if (toolsData.tools && toolsData.tools.length > 0) {\n          availableTools = toolsData.tools;\n          \n          // Display available tools\n          toolsDisplay.innerHTML = '';\n          availableTools.forEach(tool => {\n            const li = document.createElement('li');\n            li.innerHTML = `<strong>${tool.name}</strong>: ${tool.description}`;\n            toolsDisplay.appendChild(li);\n          });\n          \n          toolsList.classList.remove('hidden');\n          \n          chatMessages.innerHTML = '<div class=\"assistant-message\">Connected to server! I can now use the available tools to help you. What would you like to know?</div>';\n        } else {\n          chatMessages.innerHTML = '<div class=\"assistant-message\">Connected to server, but no tools were found.</div>';\n        }\n      } else {\n        // Manually set tools for our simple-mcp server if not returned by the server\n        availableTools = [\n          {\n            name: \"weather\",\n            description: \"Get weather information for a city\",\n            schema: {\n              city: {\n                type: { type: \"string\" },\n                description: \"City name to get weather for\"\n              }\n            }\n          },\n          {\n            name: \"calculator\",\n            description: \"Perform basic arithmetic calculations\",\n            schema: {\n              expression: {\n                type: { type: \"string\" },\n                description: \"Mathematical expression to evaluate (e.g., '2 + 3 * 4')\"\n              }\n            }\n          }\n        ];\n        \n        // Display available tools\n        toolsDisplay.innerHTML = '';\n        availableTools.forEach(tool => {\n          const li = document.createElement('li');\n          li.innerHTML = `<strong>${tool.name}</strong>: ${tool.description}`;\n          toolsDisplay.appendChild(li);\n        });\n        \n        toolsList.classList.remove('hidden');\n        \n        chatMessages.innerHTML = '<div class=\"assistant-message\">Connected to server! I can now use the available tools to help you. What would you like to know?</div>';\n      }\n      \n    } catch (error) {\n      chatMessages.innerHTML = `<div class=\"assistant-message\">Error connecting to server: ${error.message}</div>`;\n    }\n  });\n  \n  // Send user message and process response\n  sendBtn.addEventListener('click', async () => {\n    const message = userInput.value.trim();\n    if (!message) return;\n    \n    // Add user message to chat\n    addMessage('user', message);\n    userInput.value = '';\n    \n    const endpoint = serverEndpointInput.value.trim();\n    if (!endpoint) {\n      addMessage('assistant', 'Please connect to an MCP server first.');\n      return;\n    }\n    \n    try {\n      // Process the message using available tools\n      await processMessage(message, endpoint);\n    } catch (error) {\n      addMessage('assistant', `Error: ${error.message}`);\n    }\n  });\n  \n  // Allow pressing Enter to send message\n  userInput.addEventListener('keydown', (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendBtn.click();\n    }\n  });\n  \n  // Add a message to the chat\n  function addMessage(role, content, type = '') {\n    const messageDiv = document.createElement('div');\n    messageDiv.className = role === 'user' ? 'user-message' : 'assistant-message';\n    \n    if (type === 'tool-call') {\n      messageDiv.className = 'tool-call';\n      content = `<strong>Tool Call:</strong> ${content}`;\n    } else if (type === 'tool-result') {\n      messageDiv.className = 'tool-result';\n      content = `<strong>Tool Result:</strong> ${content}`;\n    }\n    \n    // Format code blocks with syntax highlighting\n    content = content.replace(/```(.*?)\\n([\\s\\S]*?)```/g, '<pre><code>$2</code></pre>');\n    content = content.replace(/`(.*?)`/g, '<code>$1</code>');\n    \n    messageDiv.innerHTML = content;\n    chatMessages.appendChild(messageDiv);\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n    \n    // Add to conversation history\n    conversation.push({ role, content });\n  }\n  \n  // Process the user message using tools\n  async function processMessage(message, endpoint) {\n    // Simple detection for tool requests\n    const weatherRegex = /weather|temperature|forecast|climate|rain|sunny|cloudy|humidity/i;\n    const calculatorRegex = /calculate|compute|math|equation|expression|[0-9]+[\\+\\-\\*\\/][0-9]+/i;\n    \n    let usedTool = false;\n    \n    // Check if the message might need the weather tool\n    if (weatherRegex.test(message)) {\n      // Extract city name - simple approach\n      const cityMatch = message.match(/(?:in|for|at)\\s+([A-Za-z\\s]+)(?:\\.|\\?|$|\\s)/i);\n      if (cityMatch && cityMatch[1]) {\n        const city = cityMatch[1].trim();\n        \n        // Add tool call to chat\n        addMessage('assistant', `Looking up weather information for \"${city}\"...`, 'tool-call');\n        \n        try {\n          // Call the weather tool\n          const response = await fetch(`${endpoint}/execute`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              name: 'weather',\n              parameters: { city }\n            })\n          });\n          \n          const result = await response.json();\n          \n          // Add tool result to chat\n          if (result.result) {\n            addMessage('assistant', `<pre>${JSON.stringify(result.result, null, 2)}</pre>`, 'tool-result');\n            addMessage('assistant', `The current weather in ${result.result.city} is ${result.result.condition} with a temperature of ${result.result.temperature}Â°C and ${result.result.humidity}% humidity.`);\n          } else {\n            addMessage('assistant', `<pre>${JSON.stringify(result, null, 2)}</pre>`, 'tool-result');\n            addMessage('assistant', `I found some information about the weather, but I couldn't format it nicely. You can see the raw result above.`);\n          }\n          \n          usedTool = true;\n        } catch (error) {\n          addMessage('assistant', `Error calling weather tool: ${error.message}`);\n        }\n      }\n    }\n    \n    // Check if the message might need the calculator tool\n    if (!usedTool && calculatorRegex.test(message)) {\n      // Extract mathematical expression - simple approach\n      let expression = message.replace(/[^0-9+\\-*/().\\s]/g, ' ').trim();\n      \n      // Look for equations in the message\n      const equationMatches = message.match(/(\\d+[\\s\\+\\-\\*\\/\\(\\)]+\\d+[\\d\\s\\+\\-\\*\\/\\(\\)]*)/g);\n      if (equationMatches && equationMatches[0]) {\n        expression = equationMatches[0].replace(/[^0-9+\\-*/().\\s]/g, '');\n      }\n      \n      if (expression) {\n        // Add tool call to chat\n        addMessage('assistant', `Calculating \"${expression}\"...`, 'tool-call');\n        \n        try {\n          // Call the calculator tool\n          const response = await fetch(`${endpoint}/execute`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              name: 'calculator',\n              parameters: { expression }\n            })\n          });\n          \n          const result = await response.json();\n          \n          // Add tool result to chat\n          if (result.result && result.result.result !== undefined) {\n            addMessage('assistant', `<pre>${JSON.stringify(result.result, null, 2)}</pre>`, 'tool-result');\n            addMessage('assistant', `The result of ${expression} is ${result.result.result}.`);\n          } else {\n            addMessage('assistant', `<pre>${JSON.stringify(result, null, 2)}</pre>`, 'tool-result');\n            addMessage('assistant', `I tried to calculate the expression, but I couldn't format the result nicely. You can see the raw result above.`);\n          }\n          \n          usedTool = true;\n        } catch (error) {\n          addMessage('assistant', `Error calling calculator tool: ${error.message}`);\n        }\n      }\n    }\n    \n    // If no tool was used, provide a generic response\n    if (!usedTool) {\n      addMessage('assistant', `I understand you're asking: \"${message}\". \n      \nI have access to these tools:\n- Weather tool: Get weather information for a city\n- Calculator tool: Perform basic arithmetic calculations\n\nCould you rephrase your question to use one of these tools? For example:\n- \"What's the weather in London?\"\n- \"Calculate 2 + 3 * 4\"`);\n    }\n  }\n  \n  // Initialize with a welcome message\n  window.addEventListener('DOMContentLoaded', () => {\n    chatMessages.innerHTML = '<div class=\"assistant-message\">Welcome to the MCP Client! Connect to an MCP server to get started.</div>';\n  });\n</script>"
      }
    }
  }
} 